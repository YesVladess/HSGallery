//
//  CardInfoPresenter.swift
//  HSGallery
//
//  Created by YesVladess on 04.12.2019.
//  Copyright (c) 2019 YesVladess. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class CardInfoPresenter {
    
    weak var view: CardInfoDisplayLogic?
    
    private func formatCardCost(_ cost: Int?) -> String {
        if let myCost = cost {
            return "\(myCost) üíé"
        } else {
            return "No cost"
        }
    }
    
    private func formatCardHealth(_ health: Int?) -> String {
        if let myHealth = health {
            return "\(myHealth) ‚ô•Ô∏è"
        } else {
            return "No health"
        }
    }
    
    private func formatCardAttack(_ attack: Int?) -> String {
        if let myAttack = attack {
            return "\(myAttack) ‚öîÔ∏è"
        } else {
            return "No attack"
        }
    }
    
    private func formatCardRarity(_ rarity: String?) -> String {
        
        if let cardRarity = rarity {
            switch cardRarity {
            case "Free":
                return "\(cardRarity)"
            case "Common":
                return "‚ö™Ô∏è \(cardRarity) ‚ö™Ô∏è"
            case "Rare":
                return "üî∑ \(cardRarity) üî∑"
            case "Epic":
                return "üü£ \(cardRarity) üü£"
            case "Legendary":
                return "üî∂ \(cardRarity) üî∂"
            default:
                return ""
            }
        } else { return "No rarity" }
        
    }
    
    private func formatCardText(_ text: String?) -> String {
        if let carText = text {
            
            var result = carText.replacingOccurrences(of: "_", with: " ")
            result = result.replacingOccurrences(of: "<b>", with: "")
            result = result.replacingOccurrences(of: "</b>", with: "")
            result = result.replacingOccurrences(of: "\\n", with: " ")
            return result
        } else {
            return "No card text"
        }
    }
    
    private func formatCardFlavor(_ flavor: String?) -> String {
        if let cardFlavor = flavor {
            return cardFlavor
        }
        else {
            return "No flavor"
        }
    }
}

extension CardInfoPresenter: CardInfoPresentationLogic {
    
    func presentCard(card: CardModel) {
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        let url = card.img
        let urlGold = card.imgGold
        let cost = formatCardCost(card.cost)
        let health = formatCardHealth(card.health)
        let attack = formatCardAttack(card.attack)
        let rarity = formatCardRarity(card.rarity)
        let text = formatCardText(card.text)
        let flavor = formatCardFlavor(card.flavor)
        
        view?.displayCard(url: url, urlGold: urlGold, cost: cost, health: health, attack: attack, rarity: rarity, text: text, flavor: flavor)
    }
    
    func presentCard(card: CreatureViewModelProtocol) {
        
        // –í–æ –≤—å—é –º–æ–¥–µ–ª–∏ —É–∂–µ –≤—Å–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ?
        let url = card.img
        let urlGold = card.img
        let cost = card.cost
        let health = card.health
        let attack = card.attack
        let rarity = card.rarity
        let text = card.text
        let flavor = ""
        
        view?.displayCard(url: url, urlGold: urlGold, cost: cost, health: health, attack: attack, rarity: rarity, text: text, flavor: flavor)
    }
}
